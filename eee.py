import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)
from dotenv import load_dotenv

# ‘≤’°’¶’°’µ’´ ’´’∂’´÷Å’´’°’¨’´’¶’°÷Å’´’°
def init_db():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            selected_serial TEXT,
            approved INTEGER
        )
    """)
    conn.commit()
    conn.close()

# Start ’∞÷Ä’°’¥’°’∂’®
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (id, username, approved) VALUES (?, ?, ?)",
              (user.id, user.username, 0))
    conn.commit()
    conn.close()

    keyboard = [
        [InlineKeyboardButton("üé¨ ’é’•’∂’§’•’ø’ø’°", callback_data="serial_vendetta")],
        [InlineKeyboardButton("üé¨ 11", callback_data="serial_11")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‘∏’∂’ø÷Ä’•÷Ñ ’Ω’•÷Ä’´’°’¨’®, ’∏÷Ä ’∏÷Ç’¶’∏÷Ç’¥ ’•÷Ñ ’§’´’ø’•’¨÷â",
        reply_markup=reply_markup
    )

# ’ç’•÷Ä’´’°’¨ ’®’∂’ø÷Ä’•’¨’∏÷Ç callback
async def select_serial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    selected = query.data.replace("serial_", "")

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("UPDATE users SET selected_serial = ? WHERE id = ?", (selected, user_id))
    conn.commit()
    conn.close()

    await query.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ join-’´ ’Ω÷Ñ÷Ä’´’∂’∑’∏’©’®÷â")

# ’ç÷Ñ÷Ä’´’∂’∑’∏’© ’Ω’ø’°’∂’°’¨’∏÷Ç÷Å ’∞’•’ø’∏
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    # ‘¥’´’¥’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ approval-’´ ’∞’°’¥’°÷Ä
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"approve_{user.id}"),
            InlineKeyboardButton("‚ùå ’Ñ’•÷Ä’™’•’¨", callback_data=f"reject_{user.id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    admin_chat_id = "6554648509"  # ÷É’∏’≠’´÷Ä admin ID-’∏’æ

    await context.bot.send_photo(
        chat_id=admin_chat_id,
        photo=update.message.photo[-1].file_id,
        caption=f"User: {user.first_name}\nID: {user.id}\n’Ä’°’Ω’ø’°’ø’•’û’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®÷â",
        reply_markup=reply_markup
    )

    await update.message.reply_text("’ç’∫’°’Ω’•÷Ñ, ’Ω’° ’Ø’°÷Ä’∏’≤ ’ß ’ø÷á’•’¨ 1-2 ÷Ä’∏’∫’•÷â")

# ’Ä’°’Ω’ø’°’ø’∏÷Ç’¥ ’Ø’°’¥ ’¥’•÷Ä’™’∏÷Ç’¥
async def approve_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("_")
    action = data[0]
    user_id = int(data[1])

    conn = sqlite3.connect("users.db")
    c = conn.cursor()

    if action == "approve":
        c.execute("UPDATE users SET approved = 1 WHERE id = ?", (user_id,))
        conn.commit()

        c.execute("SELECT selected_serial FROM users WHERE id = ?", (user_id,))
        result = c.fetchone()
        if result:
            serial = result[0]
            if serial == "vendetta":
                link = "https://t.me/+VendettaPageLink"  # ÷É’∏’≠’´÷Ä
            elif serial == "11":
                link = "https://t.me/+11SerialLink"  # ÷É’∏’≠’´÷Ä
            else:
                link = "https://t.me/yourchannel"

            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ ‘¥’∏÷Ç÷Ñ ’∞’°’Ω’ø’°’ø’æ’°’Æ ’•÷Ñ÷â ‘±’∞’° ’±’•÷Ä ’§’´’ø’¥’°’∂ ’∞’≤’∏÷Ç’¥’®:\n{link}"
            )
        await query.edit_message_caption(caption="‚úÖ ’Ä’°’Ω’ø’°’ø’æ’•÷Å÷â")

    elif action == "reject":
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå ’Å’•÷Ä ’§’´’¥’∏÷Ç’¥’® ’¥’•÷Ä’™’æ’•’¨ ’ß÷â"
        )
        await query.edit_message_caption(caption="‚ùå ’Ñ’•÷Ä’™’æ’•÷Å÷â")

    conn.close()

# ‘≥’¨’≠’°’æ’∏÷Ä’ù ’º’°’∂
if __name__ == "__main__":
    load_dotenv()
    init_db()

    TOKEN = os.getenv("TOKEN")
    if not TOKEN:
        raise ValueError("‚ùå TOKEN ’¥’´’ª’°’æ’°’µ÷Ä’°’µ’´’∂ ÷É’∏÷É’∏’≠’°’Ø’°’∂’® ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’ß÷â")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(select_serial, pattern="^serial_"))
    app.add_handler(CallbackQueryHandler(approve_reject, pattern="^(approve|reject)_"))
    app.add_handler(MessageHandler(filters.PHOTO & (~filters.COMMAND), handle_photo))

    print("ü§ñ Bot is running...")
    app.run_polling()
